// ［1］ スコープの種類
// ① スクリプトスコープ
// ② グローバルスコープ
// ③ 関数スコープ
// ④ ブロックスコープ
// ⑤ モジュールスコープ
// ⑥ 外側

// ［2］ スコープの範囲
// ① "関数内"
// 解説 スコープチェーンをたどったときに、"関数内"が最初に見つかります。
// ② 実行可能
// 解説 fn1は、レキシカルスコープ（グローバルスコープ）に位置するため、実行可能です。なお、このように関数内で再び自分自身を呼び出す関数のことを再帰関数と呼びます。何らかの条件で再帰関数の実行が止まるようにしていないと、無限に関数の実行が繰り返されるため、注意してください。
// ③ "関数内"
// 解説 スコープチェーンをたどったときに、"関数内"が最初に見つかります。
// ④ "関数内"
// 解説 val（"関数内"）は、スコープ内に存在するため、その値を取得します。
// ⑤ "グローバル"
// 解説 スコープチェーンをたどったときに、"グローバル"が見つかります。
// ⑥ "グローバル"
// 解説 val（"グローバル"）は、スコープ内に存在するため、その値を取得します。
// ⑦ "関数内"
// 解説 result（"関数内"）は、スコープ内に存在するため、その値を取得します。

// ［3］ クロージャ
function delayMessageFactory(printFn, ms) {
  return function (msg) {
    setTimeout(function () {
      printFn(msg);
    }, ms);
  };
}
const dialog = delayMessageFactory(alert, 2000);
dialog("こんにちは");
// 2秒後にアラートで「こんにちは」と表示される
const log = delayMessageFactory(console.log, 1000);
log("こんばんは");
// 1秒後にコンソールに「こんばんは」と表示される
